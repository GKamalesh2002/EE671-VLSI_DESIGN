library IEEE;
use IEEE.std_logic_1164.all;

entity brentkung is
    port(
        a,b: in std_logic_vector(31 downto 0);
        s: out std_logic_vector(31 downto 0);
        cout: out std_logic;
        cin: in std_logic
    );
end entity;

architecture behave of brentkung is
	signal p0,g0: std_logic_vector(31 down to 0);
	signal p1,g1: std_logic_vector(15 down to 0);
	signal p2,g2: std_logic_vector(7 down to 0);
	signal p3,g3: std_logic_vector(3 down to 0);
	signal p4,g4: std_logic_vector(1 down to 0);
	signal p5,g5: std_logic
	
component andgate is
    port (A, B: in std_ulogic;
    prod: out std_ulogic);
end component;

component xorgate is
    port (A, B: in std_ulogic;
    uneq: out std_ulogic);
end component;

component abcgate is
    port (A, B, C: in std_ulogic;
    abc: out std_ulogic);
end component abcgate;

component Cin_map_G is
    port(A, B, Cin: in std_ulogic;
    Bit0_G: out std_ulogic);
end component Cin_map_G;

begin
	-- generate p0 signals--
	xor_gates: for i in 0 to 31 generate
		xor_i: xorgate port map(A => a(i),B => b(i),uneq => p0(i));
	end generate xor_gates
	
	-- generate g0 signals--
	and_gates: for i in 1 to 31 generate
		and_i: andgate port map(A => a(i),B => b(i),uneq => g0(i));
	end generate and_gates

	--generate g for rightmost block from c0--
	cmapg: Cin_map_G port map(A => a(0),B => b(0),Bit0_G => g0(0));
	
	
	
	
	
	
	
	
	